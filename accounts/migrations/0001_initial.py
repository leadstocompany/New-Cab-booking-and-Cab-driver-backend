# Generated by Django 4.2.4 on 2024-12-21 16:54

import accounts.models
import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("DRIVER", "driver"),
                            ("CUSTOMER", "customer"),
                            ("ADMIN", "admin"),
                        ],
                        default="CUSTOMER",
                        max_length=11,
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=datetime.datetime(
                            2024,
                            12,
                            21,
                            16,
                            54,
                            2,
                            556073,
                            tzinfo=datetime.timezone.utc,
                        ),
                        verbose_name="date joined",
                    ),
                ),
                ("phone", models.CharField(max_length=21, unique=True)),
                ("email", models.EmailField(max_length=254)),
                ("code", models.CharField(editable=False, max_length=74, unique=True)),
                ("birth_day", models.DateField(blank=True, null=True)),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Male", "Male"),
                            ("Female", "Female"),
                            ("Other", "Other"),
                        ],
                        max_length=74,
                        null=True,
                    ),
                ),
                ("full_address", models.TextField(blank=True, null=True)),
                ("latitude", models.CharField(blank=True, max_length=50, null=True)),
                ("longitude", models.CharField(blank=True, max_length=50, null=True)),
                ("pincode", models.PositiveIntegerField(blank=True, null=True)),
                ("state", models.CharField(blank=True, max_length=74, null=True)),
                ("city", models.CharField(blank=True, max_length=74, null=True)),
                (
                    "house_or_building",
                    models.CharField(blank=True, max_length=274, null=True),
                ),
                (
                    "road_or_area",
                    models.CharField(blank=True, max_length=274, null=True),
                ),
                (
                    "alternate_number",
                    models.CharField(blank=True, max_length=74, null=True),
                ),
                ("photo_upload", models.TextField(blank=True, null=True)),
                ("user_doc", models.JSONField(blank=True, default=None, null=True)),
                ("terms_policy", models.BooleanField(default=False)),
                ("myride_insurance", models.BooleanField(default=False)),
                ("driver_duty", models.BooleanField(default=False)),
                (
                    "profile_status",
                    models.CharField(
                        choices=[
                            ("Pending", "Pending"),
                            ("Approve", "Approve"),
                            ("Rejected", "Rejected"),
                            ("Block", "Block"),
                        ],
                        default="Pending",
                        max_length=74,
                    ),
                ),
                ("rejection_reason", models.TextField(blank=True, null=True)),
                ("fcm_token", models.TextField(blank=True, null=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", accounts.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="FileUpload",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "file",
                    models.FileField(upload_to=accounts.models.user_directory_path),
                ),
                ("phone", models.CharField(max_length=74)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="CurrentLocation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "current_latitude",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "current_longitude",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Admin",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("accounts.user",),
        ),
        migrations.CreateModel(
            name="Customer",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("accounts.user",),
            managers=[
                ("objects", accounts.models.CustomerManager()),
            ],
        ),
        migrations.CreateModel(
            name="Driver",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("accounts.user",),
            managers=[
                ("objects", accounts.models.DriverManager()),
            ],
        ),
        migrations.CreateModel(
            name="DriverPhoneVerify",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "count",
                    models.PositiveIntegerField(blank=True, default=1, null=True),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.driver",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CustomerPhoneVerify",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "count",
                    models.PositiveIntegerField(blank=True, default=1, null=True),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.customer",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="BankAccount",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=200)),
                ("account_number", models.CharField(max_length=25, unique=True)),
                ("swift_code", models.CharField(max_length=35, unique=True)),
                (
                    "routing_number",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="routing number"
                    ),
                ),
                ("bank_name", models.CharField(max_length=200)),
                (
                    "account_id",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "driver",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="backaccount",
                        to="accounts.driver",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
